(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/router'), require('rxjs/BehaviorSubject'), require('@angular/animations')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/router', 'rxjs/BehaviorSubject', '@angular/animations'], factory) :
	(factory((global['bottombar-component'] = {}),global._angular_core,global._angular_common,global._angular_router,global.rxjs_BehaviorSubject,global._angular_animations));
}(this, (function (exports,_angular_core,_angular_common,_angular_router,rxjs_BehaviorSubject,_angular_animations) { 'use strict';

var BottomBarService = (function () {
    function BottomBarService() {
        /**
         * Constant for configuration that will define the default color in case that any tab has the state active
         * on the beginning
         */
        this.DEFAULT_COLOR_WITHOUT_ACTIVE_TAB = "blue";
        /**
         * Variable use for known when there are more than 3 navs items
         */
        this.moreThan3Elements = false;
        /**
         * Variable that represent the background Color of the bottom bar
         */
        this.backgroundColor = new rxjs_BehaviorSubject.BehaviorSubject("");
        /**
         * Auxiliar variable for keep track of the last nav item active
         */
        this.auxOldTab = null;
    }
    /**
     * @return {?}
     */
    BottomBarService.prototype.ngOnInit = function () { };
    /**
     * This method needs to be call after the tabs are loaded into the service,
     * it will find the active nav item in case that exist , also will set the background color
     * to the one set on the active nav item , otherwise will use the default one
     * @return {?}
     */
    BottomBarService.prototype.initiateState = function () {
        //find if one tab should be active
        this.auxOldTab = this.tabs.find(function (tab) {
            return tab.state == 'active';
        });
        this.moreThan3Elements = (this.tabs.length > 3) ? true : false;
        if (!this.SHOW_TEXT_IF_MORE_THAN_3_ELEMENTS) {
            this.SHOW_TEXT_IF_MORE_THAN_3_ELEMENTS = false;
        }
        // try to find if one tab is active , for the case that one tab is conf as active in the start
        if (this.auxOldTab == null) {
            this.backgroundColor.next(this.DEFAULT_COLOR_WITHOUT_ACTIVE_TAB);
        }
        else {
            this.backgroundColor.next(this.auxOldTab.backgroundColor);
        }
    };
    /**
     * Method use for change of active tab
     * @param {?} tab that will be active
     * @return {?}
     */
    BottomBarService.prototype.changeState = function (tab) {
        //change old tab to inactive and active the new one
        if (this.auxOldTab) {
            this.auxOldTab.state = 'inactive';
        }
        tab.state = (tab.state === 'active') ? 'inactive' : 'active';
        this.auxOldTab = tab;
    };
    /**
     * Set method for changing the color of the botton bar
     * @param {?} color
     * @return {?}
     */
    BottomBarService.prototype.changeColor = function (color) {
        this.backgroundColor.next(color);
    };
    return BottomBarService;
}());
BottomBarService.decorators = [
    { type: _angular_core.Injectable },
];
/**
 * @nocollapse
 */
BottomBarService.ctorParameters = function () { return []; };

var BottomBarComponent = (function () {
    /**
     * @param {?} bottonNavService
     */
    function BottomBarComponent(bottonNavService) {
        this.bottonNavService = bottonNavService;
    }
    /**
     * @return {?}
     */
    BottomBarComponent.prototype.ngOnInit = function () {
        var _this = this;
        //load the tabs into the bottonNavService
        this.bottonNavService.tabs = this.tabs;
        if (this.initialColor) {
            this.bottonNavService.DEFAULT_COLOR_WITHOUT_ACTIVE_TAB = this.initialColor;
        }
        if (this.showTextInCaseMore3Elements) {
            this.bottonNavService.SHOW_TEXT_IF_MORE_THAN_3_ELEMENTS = this.showTextInCaseMore3Elements;
        }
        if (this.tabs.length == 0) {
            console.warn('The component doesnt contain any NavTab Element ');
            this.bottonNavService.backgroundColor == new rxjs_BehaviorSubject.BehaviorSubject("yellow");
        }
        else {
            this.bottonNavService.initiateState();
            this.bottonNavService.backgroundColor == new rxjs_BehaviorSubject.BehaviorSubject(this.tabs[0].backgroundColor);
        }
        //Subscribe color variable to any change produce in the bottom service color variable
        this.bottonNavService.backgroundColor.subscribe(function (colorService) { _this.color = colorService; });
    };
    return BottomBarComponent;
}());
BottomBarComponent.decorators = [
    { type: _angular_core.Component, args: [{
                selector: 'bottom-nav',
                styles: [".container-bottom { position: fixed; bottom: 0; width: 100%; overflow: hidden; box-shadow: 0px 2px 14px 0px black; } .bottom-nav-bar { background: #2196F3; height: 56px; flex-direction: column; justify-content: center; align-items: center; } .active { color: rgba(255, 255, 255, 0.87); padding-top: 6px; } "],
                template: "<div class=\"container-fluid container-bottom\"> <div class=\"bottom-nav-bar row\" [style.background]=\"color\"> <bottom-nav-item [tab]=\"tabFor\" *ngFor=\"let tabFor of tabs\"></bottom-nav-item> </div> </div> ",
            },] },
];
/**
 * @nocollapse
 */
BottomBarComponent.ctorParameters = function () { return [
    { type: BottomBarService, },
]; };
BottomBarComponent.propDecorators = {
    'tabs': [{ type: _angular_core.Input },],
    'initialColor': [{ type: _angular_core.Input },],
    'showTextInCaseMore3Elements': [{ type: _angular_core.Input },],
};

var BottomNavItemComponent = (function () {
    /**
     * @param {?} bottomNavService
     */
    function BottomNavItemComponent(bottomNavService) {
        this.bottomNavService = bottomNavService;
    }
    /**
     * @return {?}
     */
    BottomNavItemComponent.prototype.ngOnInit = function () { };
    /**
     * Method that will change of active tab
     * @param {?} tab
     * @return {?}
     */
    BottomNavItemComponent.prototype.changeState = function (tab) {
        this.bottomNavService.changeState(tab);
        this.bottomNavService.changeColor(tab.backgroundColor);
    };
    return BottomNavItemComponent;
}());
BottomNavItemComponent.decorators = [
    { type: _angular_core.Component, args: [{
                selector: 'bottom-nav-item',
                template: "<div class=\"nav-item col col-offset-1\" [routerLink]=\"tab.link\" [@focusState]=\"tab.state\" (click)=\"changeState(tab)\" routerLinkActive=\"active\"> <div class=\"nav-item-icon\"> <app-icon [icon]=\"tab.icon\"></app-icon> </div> <div class=\"nav-item-title\" *ngIf=\" (this.bottomNavService.moreThan3Elements && this.bottomNavService.SHOW_TEXT_IF_MORE_THAN_3_ELEMENTS) || (tab.state=='active') \"> {{tab.title}} </div> </div> ",
                styles: [".nav-item { color: rgba(255, 255, 255, 0.54); max-width: 96px; min-width: 56px; outline: none; padding-bottom: 10px; padding-left: 12px; padding-right: 12px; padding-top: 8px; position: relative; text-align: center; } .nav-item-title { font-size: 0.9rem; } "],
                animations: [
                    _angular_animations.trigger('focusState', [
                        _angular_animations.state('inactive', _angular_animations.style({
                            transform: 'scale(1)'
                        })),
                        _angular_animations.state('active', _angular_animations.style({
                            cursor: 'pointer',
                            color: '#FFFFFF',
                            transform: 'scale(1.08)',
                            padding: '9px',
                        })),
                        _angular_animations.transition('inactive => active', _angular_animations.animate('200ms ease-in')),
                        _angular_animations.transition('active => inactive', _angular_animations.animate('200ms ease-out'))
                    ])
                ]
            },] },
];
/**
 * @nocollapse
 */
BottomNavItemComponent.ctorParameters = function () { return [
    { type: BottomBarService, },
]; };
BottomNavItemComponent.propDecorators = {
    'tab': [{ type: _angular_core.Input },],
};

var IconComponent = (function () {
    function IconComponent() {
    }
    /**
     * @return {?}
     */
    IconComponent.prototype.ngOnInit = function () {
    };
    return IconComponent;
}());
IconComponent.decorators = [
    { type: _angular_core.Component, args: [{
                selector: 'app-icon',
                template: "<i class=\"fa {{icon}}\" aria-hidden=\"true\"></i> ",
                styles: [""]
            },] },
];
/**
 * @nocollapse
 */
IconComponent.ctorParameters = function () { return []; };
IconComponent.propDecorators = {
    'icon': [{ type: _angular_core.Input },],
};

var BottomBarModule = (function () {
    function BottomBarModule() {
    }
    /**
     * @return {?}
     */
    BottomBarModule.forRoot = function () {
        return {
            ngModule: BottomBarModule,
            providers: [BottomBarService]
        };
    };
    return BottomBarModule;
}());
BottomBarModule.decorators = [
    { type: _angular_core.NgModule, args: [{
                imports: [
                    _angular_common.CommonModule,
                    _angular_router.RouterModule
                ],
                declarations: [
                    BottomBarComponent,
                    BottomNavItemComponent,
                    IconComponent,
                ],
                exports: [
                    BottomBarComponent,
                    BottomNavItemComponent,
                    IconComponent
                ]
            },] },
];
/**
 * @nocollapse
 */
BottomBarModule.ctorParameters = function () { return []; };

exports.BottomBarModule = BottomBarModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
